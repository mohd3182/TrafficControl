/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.oneware.traffic;

import com.db.TRFProgramDetail;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

/**
 *
 * @author Mohamed Laptop
 */
public class TrafficIntersectionSim extends javax.swing.JFrame {

    /**
     * Creates new form TrafficIntersectionSim
     */
    public TrafficIntersectionSim() {
        initComponents();
        trafficInitiate();
        trafficProcess();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setBackground(new java.awt.Color(102, 255, 102));
        jButton1.setText("Listener 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);

        jLabel1.setBackground(new java.awt.Color(0, 51, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png")); // NOI18N
        jLabel1.setText("Dir (1)");
        getContentPane().add(jLabel1);

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png")); // NOI18N
        jLabel2.setText("Dir(2)");
        getContentPane().add(jLabel2);

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png")); // NOI18N
        jLabel3.setText("Dir(3)");
        getContentPane().add(jLabel3);

        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png")); // NOI18N
        jLabel4.setText("Dir(4)");
        getContentPane().add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("Count : 0");
        getContentPane().add(jLabel5);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Trigger trg = (Trigger) triggerMap.get(1);
        
        if(!trg.isTriggered()){
        trg.setTriggered(true);
        trg.setWaitingTime(0);
        triggerMap.put(1, trg);
        System.out.println("Trigger 1 Active");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrafficIntersectionSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrafficIntersectionSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrafficIntersectionSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrafficIntersectionSim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrafficIntersectionSim().setVisible(true);
            }
        });


    }
    static Map programsMap = new HashMap();
    static Map triggerMap = new HashMap();
    Map signalStandbyMap = new HashMap();

    public void trafficInitiate() {
        BuildItems buildItems = new BuildItems();
        ArrayList programsList = buildItems.getData("SELECT PROGRAM_ID FROM traffic_program");
        Iterator progItr = programsList.iterator();

        while (progItr.hasNext()) {
            Map currentProgMap = (Map) progItr.next();
            Integer prog = (Integer) currentProgMap.get("PROGRAM_ID");
            int currentProg = prog.intValue();
            ArrayList dataRetrived = buildItems
                    .getData(new TRFProgramDetail(),
                    "select * from TRF_PROGRAM_DETAIL where PROGRAM_ID=" + currentProg + " order by step_id");
            Iterator itr = dataRetrived.iterator();
            Map trafficData = new HashMap();
            while (itr.hasNext()) {
                TRFProgramDetail tRFProgramDetailData = (TRFProgramDetail) itr
                        .next();
                trafficData.put(tRFProgramDetailData.getStepId(),
                        tRFProgramDetailData);
            }
            programsMap.put(currentProg, trafficData);
        }

        //intiate triggers map
        triggerMap.put(1, new Trigger(1, 30, 0, 0, 0, 2, 1));



    }

    public void trafficProcess() {

        Timer timer = new Timer();

        timer.scheduleAtFixedRate(new TimerTask() {
            int CurrentStep = 1;
            int currentSecond = 0;
            //int currentProgram;
            int plinkFlag = 0;//plink 0 dark 1 light
            int standbyTimer = 0;
            // int programId;
            Map data;
            TRFProgramDetail currentStepData;
            int currentProgramId = 1;

            @Override
            public void run() {







                data = (Map) programsMap.get(currentProgramId);
                currentStepData = (TRFProgramDetail) data.get(CurrentStep);



                //overide Current Program
                Trigger trg = (Trigger) triggerMap.get(1);
                int waitingTime = trg.getWaitingTime();
                System.out.println("Current Program ID:" + currentProgramId);
                System.out.println("waiting time :" + waitingTime);
                if (trg.isTriggered()) {
                    waitingTime++;
                    trg.setWaitingTime(waitingTime);


                }
                if (trg.isTriggered() 
                        &&
                       // trg.getWaitingTime() == MathHelp.showMax(trg.getGroup1Standby(), MathHelp.showMax(trg.getGroup2Standby(), MathHelp.showMax(trg.getGroup3Standby(), trg.getGroup4Standby())))
                        (
                        MathHelp.greaterOrEqual((Integer)signalStandbyMap.get(1), trg.getGroup1Standby())
                        &&
                        MathHelp.greaterOrEqual((Integer)signalStandbyMap.get(2), trg.getGroup2Standby())
                        &&
                        MathHelp.greaterOrEqual((Integer)signalStandbyMap.get(3), trg.getGroup3Standby())
                        &&
                        MathHelp.greaterOrEqual((Integer)signalStandbyMap.get(4), trg.getGroup4Standby())
                        
                        )
                        
                        ) {
                    trg.setWaitingTime(0);
                    trg.setTriggered(false);
                    System.out.println("Change Program -:");
                    data = (Map) programsMap.get(trg.getProgramId());

                    System.out.println("Change Step-:");
                    CurrentStep = trg.getStepId();
                    currentStepData = (TRFProgramDetail) data.get(CurrentStep);
                    currentProgramId = trg.getProgramId();
                    System.out.println("Trans Program :" + trg.getProgramId());
                    currentSecond = 0;
                }
                triggerMap.put(1, trg);
                /* if (currentStepData.getProgramId() != programId) {

                 standbyTimer = 0;
                 programId = currentStepData.getProgramId();
                 System.out.println("Reset Standby");
                 }*/

                if (currentStepData == null) {

                    System.out.println("step is Null$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                }
                System.out.println("step Id:" + currentStepData.stepId);
                signalControl(1, currentStepData.group1Action, plinkFlag);
                signalControl(2, currentStepData.group2Action, plinkFlag);
                signalControl(3, currentStepData.group3Action, plinkFlag);
                signalControl(4, currentStepData.group4Action, plinkFlag);
                jLabel5.setText("Count:" + (currentStepData.secDuration - currentSecond));
                if (plinkFlag == 0) {
                    plinkFlag = 1;
                } else {
                    plinkFlag = 0;
                }
                standbyTimer++;
                currentSecond++;
                if (currentStepData != null && currentSecond == currentStepData.secDuration) {
                    // playSound("109217__yalnizsarki__tam");

                    CurrentStep = currentStepData.nextStep;
                    currentProgramId = currentStepData.getNextProgram();
                    // currentProgramId = currentStepData.nextProgram;
                    currentSecond = 0;
                }
            }
        }, 1000, 1000);
    }

    public void signalControl(int signalPort, String actionNeeded, int plinkMode) {
        switch (signalPort) {
            case 1:

                try {
                    Integer i1 = (Integer) signalStandbyMap.get(1);
                    signalStandbyMap.put(1, i1 + 1);
                } catch (Exception e) {
                    signalStandbyMap.put(1, 1);
                }
                break;
            case 2:
                try {
                    Integer i2 = (Integer) signalStandbyMap.get(2);
                    signalStandbyMap.put(2, i2 + 1);
                } catch (Exception e) {
                    signalStandbyMap.put(2, 1);
                }
                break;
            case 3:
                try {
                    Integer i3 = (Integer) signalStandbyMap.get(3);
                    signalStandbyMap.put(3, i3 + 1);
                } catch (Exception e) {
                    signalStandbyMap.put(3, 1);
                }
                break;
            case 4:
                try {
                    Integer i4 = (Integer) signalStandbyMap.get(4);
                    signalStandbyMap.put(4, i4 + 1);
                } catch (Exception e) {
                    signalStandbyMap.put(4, 1);
                }
            default:
                break;
        }


        if (actionNeeded.indexOf("D") > -1) {

            if (plinkMode == 0) {
                switch (signalPort) {
                    case 1:
                        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\dark.png"));

                        break;
                    case 2:
                        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\dark.png"));
                        break;
                    case 3:
                        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\dark.png"));
                        break;
                    case 4:
                        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\dark.png"));
                        break;
                    default:
                        break;
                }
            } else {
                actionNeeded = actionNeeded.replaceAll("D", "");
            }
        }



        if (actionNeeded.equalsIgnoreCase("R")) {
            switch (signalPort) {
                case 1:
                    jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\r.png"));

                    break;
                case 2:
                    jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\r.png"));
                    break;
                case 3:
                    jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\r.png"));
                    break;
                case 4:
                    jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\r.png"));
                    break;
                default:
                    break;
            }
        }



        if (actionNeeded.equalsIgnoreCase("G")) {
            // playSound("109217__yalnizsarki__tam");
            switch (signalPort) {
                case 1:
                    jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\g.png"));
                    signalStandbyMap.put(1, 0);
                    break;
                case 2:
                    jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\g.png"));
                    signalStandbyMap.put(2, 0);
                    break;
                case 3:
                    jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\g.png"));
                    signalStandbyMap.put(3, 0);
                    break;
                case 4:
                    jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\g.png"));
                    signalStandbyMap.put(4, 0);
                    break;
                default:
                    break;
            }
        }

        if (actionNeeded.equalsIgnoreCase("Y")) {
            switch (signalPort) {
                case 1:
                    jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png"));
                    break;
                case 2:
                    jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png"));

                    break;
                case 3:
                    jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png"));

                    break;
                case 4:
                    jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mohamed Laptop\\Desktop\\Lamp\\y.png"));

                    break;
                default:
                    break;
            }
        }

    }

    public void playSound(String soundName) {
        String stringFile = "D:\\SD Backup\\MyFiles\\" + soundName + ".wav";
        File soundFile = new File(stringFile);
        AudioInputStream inputStream;
        try {
            inputStream = AudioSystem.getAudioInputStream(soundFile);
            AudioFormat format = inputStream.getFormat();
            DataLine.Info info = new DataLine.Info(Clip.class, format);
            Clip clip = (Clip) AudioSystem.getLine(info);
            clip.open(inputStream);
            clip.start();
        } catch (UnsupportedAudioFileException ex) {
        } catch (IOException ex) {
        } catch (LineUnavailableException ex) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
